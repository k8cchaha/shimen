#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CVideorecvctrlctrl1 wrapper class

class CVideorecvctrlctrl1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CVideorecvctrlctrl1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xBF0CAF0, 0x24F5, 0x4AAE, { 0xAD, 0xC8, 0xBB, 0x79, 0xE6, 0x92, 0x17, 0x8D } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:
enum
{
    VideoRecvFilter = 0,
    NetworkFilter = 1
}__MIDL_IVideoRecvCtrl_0001;


// Operations
public:

// _DVideoRecvCtrl

// Functions
//

	long Init()
	{
		long result;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long Destroy()
	{
		long result;
		InvokeHelper(0x2, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long Connect(unsigned long IP, unsigned short port, LPCTSTR user, LPCTSTR pass, __int64 historicalTime)
	{
		long result;
		static BYTE parms[] = VTS_UI4 VTS_UI2 VTS_BSTR VTS_BSTR VTS_I8 ;
		InvokeHelper(0x3, DISPATCH_METHOD, VT_I4, (void*)&result, parms, IP, port, user, pass, historicalTime);
		return result;
	}
	long Connect2(LPCTSTR host, unsigned short port, LPCTSTR user, LPCTSTR pass, __int64 historicalTime)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_UI2 VTS_BSTR VTS_BSTR VTS_I8 ;
		InvokeHelper(0x4, DISPATCH_METHOD, VT_I4, (void*)&result, parms, host, port, user, pass, historicalTime);
		return result;
	}
	long StartVideo()
	{
		long result;
		InvokeHelper(0x5, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long StopVideo()
	{
		long result;
		InvokeHelper(0x6, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long SetDecorations(long flags)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_I4, (void*)&result, parms, flags);
		return result;
	}
	long SetRegionalSettings(long iTZOffsetSeconds, long b24HourClock, long iDateFormat)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_I4, (void*)&result, parms, iTZOffsetSeconds, b24HourClock, iDateFormat);
		return result;
	}
	__int64 GetLastMediaTime()
	{
		__int64 result;
		InvokeHelper(0x9, DISPATCH_METHOD, VT_I8, (void*)&result, NULL);
		return result;
	}
	long Connect3(unsigned long IP, unsigned short port, LPCTSTR user, LPCTSTR pass, long historicalTime, long historicalMS)
	{
		long result;
		static BYTE parms[] = VTS_UI4 VTS_UI2 VTS_BSTR VTS_BSTR VTS_I4 VTS_I4 ;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_I4, (void*)&result, parms, IP, port, user, pass, historicalTime, historicalMS);
		return result;
	}
	long GetLastMediaTime3(long * pTime, long * pMS)
	{
		long result;
		static BYTE parms[] = VTS_PI4 VTS_PI4 ;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, parms, pTime, pMS);
		return result;
	}
	long SetRegionalSettings2(long iTZOffsetSecondsPrev, long iTZOffsetSecondsNext, long iTZOffsetChange, long b24HourClock, long iDateFormat)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0xc, DISPATCH_METHOD, VT_I4, (void*)&result, parms, iTZOffsetSecondsPrev, iTZOffsetSecondsNext, iTZOffsetChange, b24HourClock, iDateFormat);
		return result;
	}
	long SetSpeedD(double dSpeed)
	{
		long result;
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, parms, dSpeed);
		return result;
	}
	long GetLastMediaTimeSecs()
	{
		long result;
		InvokeHelper(0xe, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}

// Properties
//



};
